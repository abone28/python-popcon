#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2011  Andrey Bondarenko
#
# This file is part of python-popcon
#
# Python-popcon is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of 
# the License, or (at your option) any later version.
#
# Python-popcon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with python-popcon. If not, see <http://www.gnu.org/licenses/>.
#
"""Upload popularity-contest result snapshot into a database.

"""

from datetime import datetime
import gzip
import os
import pytz
import sys
from urllib2 import urlopen

import popcon
import popcon.sql


def parse_args(args=None):
    import argparse

    parser = argparse.ArgumentParser(
        description="Load popularity-contenst submission data into database"
        )
    parser.add_argument("--db", metavar="URL", required=True,
        help="database URL (for syntax see SQL Alchemy docs)"
        )
    parser.add_argument("url", nargs="?",
        help="popularity-contest result data"
        )

    return parser.parse_args(args)


def main(args=None):

    args = parse_args(args)

    # FIXME: upload should be a transaction
    # FIXME: database password from python-keyring
    db = popcon.sql.PopconDB(args.db)

    # FIXME: popcon url as option
    popcon_url  = "http://popcon.ubuntu.com/all-popcon-results.txt.gz"
    filename    = "../ubuntu-all-popcon-results.txt"
    #popcon_url  = "http://popcon.debian.org/all-popcon-results.gz"
    #filename    = "../debian-all-popcon-results.txt"
    popcon_file = open(filename, "r")
    # FIXME: download and cache popcon
    #popcon_file = gzip.GzipFile(fileobj=urlopen(popcon_url))

    # FIXME: get datetime from file ctime
    popcon_time = datetime.fromtimestamp(
       os.stat(filename).st_mtime, pytz.utc)

    snap = db.new_stats(popcon_url, popcon_time)

    print snap._init_snap_id()

    submissions = int(popcon_file.readline().split()[1])
    snap.set_submissions(submissions)

    writer = snap.pkg_bulk_writer()
    def write(*args):
        writer.insert(*args)
    
    data = popcon._parse(popcon_file.read())
    for package, (vote, olde, recent, nofiles) in data.iteritems():
        # FIXME: options for threating invalid packages
        package = package.decode("ascii", "replace").encode("ascii", "replace")
        write(package, vote, olde, recent, nofiles)


if __name__ == "__main__":
    sys.exit(main())
